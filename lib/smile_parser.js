const emojis=require("./minifiedEmoji.json"),regex=new RegExp(/:([a-zA-Z1-9+_-]*?):/),toneRegex=new RegExp(/:(.*?)::(skin-tone-\d*):/),emojiRegex=new RegExp(/(\B|^)((:\)|:\/|:\(|:'\(|:\||;\))\B|(:D|:P|:o)\b)/),emojiMap={};for(const e of emojis){if(e.short_names)for(const s of e.short_names)emojiMap[`:${s}:`]=e;if(e.texts)for(const s of e.texts)emojiMap[s]=e}export const smileParse=(e,s)=>{let t;for(;null!==(t=emojiRegex.exec(e));){const l=emojiMap[`${t[0]}`];e=e.replace(t[0],`<img ${s.styles?`style="${s.styles}"`:""} src="${s.url}${l.image}" alt="${l.short_name}" />`)}for(;null!==(t=toneRegex.exec(e));){const l=emojiMap[`:${t[1]}:`],o=emojiMap[`:${t[2]}:`];let r;try{r=o.image.length?`${l.image.split(".")[0]}-${o.image}`:`${l.image}`,e=e.replace(t[0],`<img ${s.styles?`style="${s.styles}"`:""} src="${s.url}${r}" alt="${t[1]}-${t[2]}" />`)}catch(o){e=e.replace(t[0],`<img ${s.styles?`style="${s.styles}"`:""} src="${s.url}${l.image}" alt="${t[1]}" />`)}}for(;null!==(t=regex.exec(e));){let l=emojiMap[`:${t[1]}:`];try{e=e.replace(t[0],`<img ${s.styles?`style="${s.styles}"`:""} src="${s.url}${l.image}" alt="${t[1]}" />`)}catch(s){e=e.replace(t[0],t[1])}}return e};export default{smileParse:smileParse};
